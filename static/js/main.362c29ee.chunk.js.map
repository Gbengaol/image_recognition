{"version":3,"sources":["Components/SearchUrl.js","Components/FaceRecognition.js","App.js","serviceWorker.js","index.js"],"names":["SearchUrl","_ref","onChange","submitImage","value","react_default","a","createElement","className","type","placeholder","name","onClick","FaceRecognition","url","box","style","position","textAlign","src","id","alt","height","width","top","topRow","left","leftCol","right","rightCol","bottom","bottomRow","app","Clarifai","App","apiKey","state","boxImage","imageUrl","e","_this","setState","Object","defineProperty","target","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","displayFaceBox","_callee","regenerator_default","wrap","_context","prev","next","preventDefault","models","predict","FACE_DETECT_MODEL","concat","then","response","catch","err","console","log","stop","Components_SearchUrl","this","Components_FaceRecognition","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.362c29ee.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchUrl = ({onChange, submitImage, value}) => {\r\n\t\treturn (\r\n\t\t\t<div className=\"mt-4\">\r\n\t\t\t\t<form>\r\n\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t<input \r\n\t\t\t\t\t\t\tclassName=\"form-control form-control-lg\" \r\n\t\t\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\t\t\tplaceholder=\"Enter Image URL\"\r\n\t\t\t\t\t\t\tname=\"url\"\r\n\t\t\t\t\t\t\tonChange = {onChange}\r\n\t\t\t\t\t\t\tvalue={value}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<button type=\"button\" onClick={submitImage} className=\"btn btn-warning\">Submit</button>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\nexport default SearchUrl;","import React from 'react';\r\n\r\nconst FaceRecognition = ({url, box}) => {\r\n\t\treturn (\r\n\t\t\t<div className=\"center ma\" style={{position: 'relative', textAlign: 'center'}}>\r\n\t\t\t\t<div className=\"absolute mt-2\">\r\n\t\t\t\t\t<img src={url} id=\"image\" alt=\"\" height=\"100%\" width=\"100%\" />\r\n\t\t\t\t\t<div className=\"bounding-box\" style={{top: box.topRow, left: box.leftCol, right: box.rightCol, bottom: box.bottomRow}}></div>\r\n\t\t\t\t</div>\t\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\nexport default FaceRecognition;","import React, {Component }  from 'react';\nimport './App.css';\nimport SearchUrl from './Components/SearchUrl';\nimport FaceRecognition from './Components/FaceRecognition';\nimport Clarifai from 'clarifai';\n\n const app = new Clarifai.App({apiKey: '733c6cd79e34456eb6620b760aba3b05'});\n\nclass App extends Component{\n    state = {\n      url: '',\n      boxImage: {},\n      imageUrl: ''\n    }\n\n  onChange = (e) => {\n    this.setState({[e.target.name]: e.target.value});\n  }\n\n  calculateFaceLocation = (data) => {\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('image');\n    const height = Number(image.height);\n    const width = Number(image.width);\n    return {\n      leftCol : clarifaiFace.left_col * width,\n      topRow : clarifaiFace.top_row * height,\n      rightCol : width - (clarifaiFace.right_col * width),\n      bottomRow : height - (clarifaiFace.bottom_row * width)\n    }\n  }\n\n  displayFaceBox = (box) => {\n    this.setState({boxImage: box})\n  }\n\n  submitImage = async (e) => {\n    e.preventDefault();\n    await this.setState({imageUrl: this.state.url})\n    app.models.predict(Clarifai.FACE_DETECT_MODEL, `${this.state.imageUrl}`)\n        .then(response => this.displayFaceBox(this.calculateFaceLocation(response)))\n        .catch(err => {\n          console.log(err);\n        });\n      this.setState({imageUrl: ''})\n  }\n\n  render(){\n    return (\n      <div className=\"container\">\n        <SearchUrl onChange={this.onChange} value={this.state.url} submitImage={this.submitImage} />\n        <FaceRecognition url={this.state.url} box={this.state.boxImage} />\n      </div>\n    );\n} \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}